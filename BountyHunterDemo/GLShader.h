/** Shader.h

	A wrapper class to bundle OpenGL shader facilities.

	Author : Tobias Stein
	Created: 03/10/2014, 4:47pm
*/

#ifndef __SHADER_H__
#define __SHADER_H__

#include "OpenGL.h"

#include <unordered_map>
#include <vector>


/** \class Shader

	\brief A base shader class that provides all
	shader related methods. Specific shader will be
	derived from the base class.
*/
class Shader {

protected:

	/** mShaderID
		A unique shader id, generated by glCreateShader.
	*/
	GLuint	mShaderID;

	/** mType
		Holds the shaders type. This value can be one of these three
		values: GL_VERTEX_SHADER, GL_FRAGMENT_SHADER, GL_GEOMETRY_SHADER.
	*/
	GLenum	mType;

	/** mCompiled
		A flag that shows if the shader is compiled successfully.
	*/
	GLint	mCompiled;

	/** compile
		Compiles the shader code.
	*/
	void compile(const char* code );

	/** log
		Prints the information log.
	*/
	void log();

public:

	/** C'tor
	*/
	Shader( const char* code, GLenum type );

	/** D'tor
	*/
	~Shader();


	//////////////////////////////////////////////////////
	// ACCESSORS
	//////////////////////////////////////////////////////

	inline GLuint		GetShaderID() const { return mShaderID; }
	inline GLboolean	IsCompiled() const { return mCompiled; }
	inline GLboolean	failed() const { return !mCompiled; }

}; // class Shader


/** \class VertexShader

	\brief Specifies a vertex shader.
*/
class VertexShader : public Shader {

public:

	VertexShader(const char* code);

}; // class VertexShader



/** \class FragmentShader

\brief Specifies a fragment shader.
*/
class FragmentShader : public Shader {

public:

	FragmentShader(const char* code);

}; // class FragmentShader




/** \class ShaderProgram

\brief this class creates and manages the actual shader program.
*/
class ShaderProgram {

private:

	/** mShaderProgramID
		The unique shader program id generated by glCreateProgram
	*/
	GLuint	mShaderProgramID;

	/** mShaderList
		A list of all shaders used by this program.
	*/
	typedef std::vector<Shader*> tShaderList;
	tShaderList mShaderList;

	/** mLinked
		Holds the link status. True if successfully linked.
	*/
	GLint	mLinked;


	/** link
		Links the shader program.
	*/
	void link(Shader**, int num);

	/** log
		Get the shader program log inforamtions,
	*/
	void log();

	typedef std::unordered_map<const char*, GLint> tShaderVars;
	
	/** mShaderAttributes
		A collection of all shader attribute variables used by shaders in this program.
	*/
	tShaderVars mShaderAttributes;

	/** mShaderUniforms
		A collection of all shader uniform variables used by shaders in this program.
	*/
	tShaderVars mShaderUniforms;

public:

	/** C'tor
		Creates a new shader program from a vertex and fragment shader.
	*/
	ShaderProgram(VertexShader* vertex_shader, FragmentShader* fragment_shader);
	
	/** C'tor
		Creattes a new shader programm from multiple shaders.

		@param shader An array of shader programs.
		
		@param num The number of shaders in that array. 
	*/
	ShaderProgram(Shader** shader, int num);

	/** D'tor
	*/
	~ShaderProgram();

	/** Use
		Calls glUseProgram(mShaderProgrmID).
	*/
	void Use() const;

	/** Unuse
		Calls glUseProgram(0).
	*/
	void Unuse() const;

	/** AddAttribute
		
		\brief Adds a new shader attribute variable name to the collection.
	
		@parem attr Shader attribute.

		@return Returns the location of the attribute.
	*/
	GLint AddAttribute(const char* attr );

	/** AddUniform 

		\brief Adds a new shader uniform variable name to the collection.

		@param uni Shader uniform.

		@return Returns the location of the uniform.
	*/
	GLint AddUniform(const char* uni );

	/** Overload index operator
	
		\brief Returns the location of a vertex attribute.

		@param var_name The name of the attribute.
	*/
	GLint operator[](const char* attribute );

	/** Overload function operator
	
		\brief Returns the location of a uniform variable.

		@param uniform The name of the uniform.
	*/
	GLint operator()(const char* uniform );

	////////////////////////////////////////////////////
	// ACCESSORS
	////////////////////////////////////////////////////

	inline GLuint		GetShaderProgramID() const { return mShaderProgramID; }
	inline GLboolean	IsLinked() const { return mLinked; }
	inline GLboolean	failed() const { return !mLinked; }
};


#endif // __SHADER_H__